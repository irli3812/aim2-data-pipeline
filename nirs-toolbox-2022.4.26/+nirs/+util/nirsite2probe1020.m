function probe1020 = nirsite2probe1020(montage_folder)
% Converts a NIRSite 2.0 montage into a probe1020 with the exception of the
% field "link" that must be overwritten with the one properly generated by importing the data collected with a
% specific hardware (correct order of pairings and lambdas).


%% Load probeInfo created by NIRSite
file = dir(fullfile([montage_folder filesep '*probeInfo.mat']));
load([file.folder filesep file.name],'-mat');

SrcPos = probeInfo.probes.coords_s2;
SrcPos(:,3)=0;
DetPos = probeInfo.probes.coords_d2;
DetPos(:,3)=0;

%% Load the probe
file = dir(fullfile([montage_folder filesep '*Channels.txt']));
channels = importdata([file.folder filesep file.name]);
link = table(repmat(channels(:,2),2,1),repmat(channels(:,3),2,1),...
    reshape(repmat([760 850],length(channels(:,2)),1),[],1),...
    'VariableNames',{'source','detector','type'});
probe = nirs.core.Probe(SrcPos,DetPos,link);

scale=mean(channels(:,7)./probe.distances(1:length(probe.distances)/2));
probe.optodes.X=scale*probe.optodes.X;
probe.optodes.Y=scale*probe.optodes.Y;
probe.optodes.Z=scale*probe.optodes.Z;
probe.fixeddistances=probe.distances*scale;

%% Load a preset geometry generated from NIRSite 2.0
load NIRxGeomHead_NIRSite2;
probeInfo.geom=geom;
Name=probeInfo.geom.NIRxHead.ext1020sys.labels';
X=probeInfo.geom.NIRxHead.ext1020sys.coords3d(:,1);
Y=probeInfo.geom.NIRxHead.ext1020sys.coords3d(:,2);
Z=probeInfo.geom.NIRxHead.ext1020sys.coords3d(:,3);
Type=repmat('10-20',length(Name),1);
Units=repmat('mm',length(Name),1);
Draw=repmat(true,length(Name),1);
fid_1020 = table(Name,X,Y,Z,Type,Units,Draw);

% Add FID locations to the 2D probe
fidS=table(probeInfo.probes.labels_s',...
    probe.srcPos(:,1),...
    probe.srcPos(:,2),...
    probe.srcPos(:,3),...
    repmat({'FID-anchor'},length(probeInfo.probes.labels_s),1),repmat({'mm'},length(probeInfo.probes.labels_s),1),...
    'VariableNames',{'Name','X','Y','Z','Type','Units'});
fidD=table(probeInfo.probes.labels_d',...
    probe.detPos(:,1),...
    probe.detPos(:,2),...
    probe.detPos(:,3),...
    repmat({'FID-anchor'},length(probeInfo.probes.labels_d),1),repmat({'mm'},length(probeInfo.probes.labels_d),1),...
    'VariableNames',{'Name','X','Y','Z','Type','Units'});

% and concatenate it to the probe
probe.optodes=[probe.optodes; fidS; fidD];

%% Find common labes between internal model and probeInfo and add indices to probeInfo
[log,idx] = ismember(probeInfo.probes.labels_s,probeInfo.geom.NIRxHead.ext1020sys.labels);
probeInfo.probes.index_s = idx(log);
[log,idx] = ismember(probeInfo.probes.labels_d,probeInfo.geom.NIRxHead.ext1020sys.labels);
probeInfo.probes.index_d = idx(log);

%% Create BEM
BEM(1)=nirs.core.Mesh(probeInfo.geom.NIRxHead.mesh.nodes(:,end-2:end),probeInfo.geom.NIRxHead.mesh.belems(:,end-2:end),[]);
%BEM(1)=reducemesh(BEM(1),.25);
BEM(1).transparency=.2;
BEM(1).fiducials=fid_1020;

BEM(2)=nirs.core.Mesh(probeInfo.geom.NIRxHead.mesh1.nodes(:,end-2:end),probeInfo.geom.NIRxHead.mesh1.belems(:,end-2:end),[]);
%BEM(2)=reducemesh(BEM(2),.25);
BEM(2).transparency=.2;

% This will allow NIRFAST to directly use the info for the BEM model
lambda=unique(probe.link.type);
prop{1} = nirs.media.tissues.skin(lambda);
prop{2} = nirs.media.tissues.bone(lambda);
prop{3} = nirs.media.tissues.water(lambda);
prop{4} = nirs.media.tissues.brain(lambda,0.7, 50);

fwdBEM=nirs.forward.NirfastBEM;
fwdBEM.mesh=BEM;
fwdBEM.prop  = prop;

%% Create 10-20 probe
probe1020=nirs.util.registerprobe1020(probe);
probe1020=probe1020.register_mesh2probe(fwdBEM.mesh);
probe1020.opticalproperties=prop;

m=probe1020.getmesh;
fid_1020=m(1).fiducials;    % NIRx fiducials

lst=[probeInfo.probes.index_s(:); probeInfo.probes.index_d(:)];
labels={probeInfo.geom.NIRxHead.ext1020sys.labels{lst}};
[~,lst2]=ismember(labels,fid_1020.Name);

XYZ=[fid_1020.X(lst2) fid_1020.Y(lst2) fid_1020.Z(lst2)];
probe1020.optodes_registered=probe1020.optodes;
probe1020.optodes_registered.X(1:length(lst2))=XYZ(:,1);
probe1020.optodes_registered.Y(1:length(lst2))=XYZ(:,2);
probe1020.optodes_registered.Z(1:length(lst2))=XYZ(:,3);

probe1020.link=probe.link;